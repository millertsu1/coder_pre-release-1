* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

/* 
? Transition es un shorthand que engloba las la siguientes propiedades.

*transition-property-> indica  a que propiedad vamos a aplicar la transicion.

*transition-duration-> indica cuanto tiempo durara la transicion.

*transition-timing-function -> indica el tipo de animacion a aplicar durante la transicion.

*transition-delay-> indica cuanto tiempo de retraso tendra la aplicacion de la propiedad.

! sintaxis

transition: transition-property | transition-duration | transition-timing-function | transition-delay;

 */

/*================ transition explicacion=============== */

.container {
  border: 1px solid black;
  width: 200px;
  height: 200px;
  background-color: blueviolet;
  font-size: 20px;
  /* transition */
  transition-property: background-color, width, height, font-size,border-bottom;
  transition-duration: 2s;
  transition-timing-function: ease-in-out;
  transition-delay: 1s;
  
}
.container:hover {
  background-color: red;
  width: 300px;
  height: 300px;
  font-size: 60px;
  border-bottom: 4px solid blue;
}

/* ============transform explicacion ================*/

.atras {
  position: absolute;
  top: 200px;
  left: 300px;
  width: 300px;
  height: 300px;
  background-color: aqua;
  z-index: -1;
}
.adelante {
  position: absolute;
  top: 200px;
  left: 300px;
  width: 300px;
  height: 300px;
  background-color: tomato;
  color: #fff;
  text-align: center;
  padding-top: 100px;
  font-weight: 700;
  font-size: 25px;
  transition: transform 2s;
  transform-origin: top left;
}
.adelante:hover {
  /* 
    Las transformaciones aplican a elementos 2D y 3D
    
   * 2D: 
    translate
    rotate
    scale
    skew
    matrix
    
    ! 3D:
    rotateX
    rotateY
    rotateZ
   
   */
  /* *2D */
  /* transform: translate(x, y, podemos combinar valores de X y Y al mismo tiempo) */
  /* transform: translate(100px, -200px); */

  /* translate: rotate(grados en deg, acepta valores negativos); */
  /* transform: rotate(40deg); */

  /* transform: scale(x, y, admite valores que amplian y reducen y tambien pueden ser independientes en X y Y); */
  /*  transform: scale(0.5, 0.5); */

  /*  transform: skew( se define en grados y acepta valores negativos y positivos. Valores para X y Y); */
/*   transform: skew(-15deg); */

  /*  transform: matrix(scaleX, skewY, skewX, scaleY, translateX, translateY); */
  /*  transform: matrix(2, 0.45, 0.45, 2, 200, 100); */

  /*! 3D */

  /* transform: rotateX(grados); */
  /* transform: rotateX(180deg); */

  /* transform: rotateY(grados); */
  /* transform: rotateY(360deg);  */

  /* transform: rotateZ(grados); */
  /* transform: rotateZ(180deg); */

  /* Podemos cambiar el eje de rotacion de elemento para la propiedad ROTATE Z, colocandole  a nuestro elemento la propiedad transform-origin: top left */
}

/* ============animation explicacion ================*/
.animation {
  position: absolute;
  top: 300px;
  left: 800px;
  width: 50px;
  height: 50px;
  background-color: aqua;
  color: blueviolet;
  font-weight: 700;
  /* propiedades de animacion */
  animation-name: correr;
  animation-duration: 3000ms;
  animation-iteration-count: infinite;
}
@keyframes correr {
  0% {
    transform: translate(0px, 0px);
  }
  25% {
    transform: translate(200px, 0px);
  }
  50% {
    transform: translate(200px, 200px);
  }
  75% {
    transform: translate(0px, 200px);
  }
  100% {
    transform: translate(0px, 0px);
  }
}